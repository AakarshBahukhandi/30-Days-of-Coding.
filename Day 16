You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).
Find two lines that together with the x-axis form a container, such that the container contains the most water.
Return the maximum amount of water a container can store.
Notice that you may not slant the container.

class Solution:
    def maxArea(self, height: List[int]) -> int:
        # Initialize two pointers and the maximum area
        left, right = 0, len(height) - 1
        max_area = 0
        
        # Loop until the two pointers meet
        while left < right:
            # Calculate the current area
            width = right - left
            current_height = min(height[left], height[right])
            current_area = width * current_height
            
            # Update the maximum area if the current area is larger
            max_area = max(max_area, current_area)
            
            # Move the pointer pointing to the shorter line
            if height[left] < height[right]:
                left += 1
            else:
                right -= 1
        
        return max_area
