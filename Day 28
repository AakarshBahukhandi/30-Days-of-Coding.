You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once.

Return the single element that appears only once.

Your solution must run in O(log n) time and O(1) space.


class Solution:
    def singleNonDuplicate(self, nums: List[int]) -> int:
        left, right = 0, len(nums) - 1
        
        while left < right:
            mid = (left + right) // 2
            # Check if mid is part of a valid pair
            if nums[mid] == nums[mid ^ 1]:
                # Single element is in the second half
                left = mid + 1
            else:
                # Single element is in the first half
                right = mid
        
        # left and right will converge on the single element
        return nums[left]
