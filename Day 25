Given an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k.

A subarray is a contiguous non-empty sequence of elements within an array.


from typing import List

class Solution:
    def subarraySum(self, nums: List[int], k: int) -> int:
        # Initialize a hash map to store the frequency of prefix sums
        prefix_sum_count = {0: 1}
        current_sum = 0
        count = 0
        
        for num in nums:
            # Add the current number to the cumulative sum
            current_sum += num
            
            # Check if there is a prefix sum that would make the subarray sum to k
            # current_sum - prefix_sum = k  -> prefix_sum = current_sum - k
            if current_sum - k in prefix_sum_count:
                count += prefix_sum_count[current_sum - k]
            
            # Update the frequency of the current prefix sum
            if current_sum in prefix_sum_count:
                prefix_sum_count[current_sum] += 1
            else:
                prefix_sum_count[current_sum] = 1
        
        return count


 
