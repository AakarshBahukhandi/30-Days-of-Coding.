You are given an integer mountain array arr of length n where the values increase to a peak element and then decrease.

Return the index of the peak element.

Your task is to solve it in O(log(n)) time complexity.



  from typing import List

class Solution:
    def peakIndexInMountainArray(self, arr: List[int]) -> int:
        left, right = 0, len(arr) - 1

        while left < right:
            mid = (left + right) // 2

            # Compare the middle element with the next one
            if arr[mid] < arr[mid + 1]:
                # Peak is in the right half
                left = mid + 1
            else:
                # Peak is in the left half (or at mid)
                right = mid
        
        # At the end of the loop, left == right, which is the peak index
        return left
